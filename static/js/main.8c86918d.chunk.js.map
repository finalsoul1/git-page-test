{"version":3,"sources":["imgs/bono.jpg","containers/Gnb/Gnb.js","pages/Home/Home.js","pages/Weather/Weather.js","router/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","menuStyle","margin","width","border","borderRadius","boxShadow","marginBottom","marginTop","transition","fixedMenuStyle","left","marginLeft","backgroundColor","Gnb","state","menuFixed","overlayFixed","activeItem","handleItemClick","e","_ref","name","_this","setState","stickTopMenu","unStickTopMenu","this","console","log","props","react_default","a","createElement","className","Visibility","onBottomPassed","onBottomVisible","once","Menu","borderless","fixed","undefined","style","Container","text","Item","header","as","NavLink","exact","to","position","Dropdown","pointing","Divider","Header","Component","Home","Image","src","bono","size","centered","Weather","Routes","react_router","path","component","App","updateWindowDimensions","window","innerWidth","addEventListener","removeEventListener","react_router_dom","basename","containers_Gnb_Gnb","router","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c86918d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bono.f2601767.jpg\";","import React, { Component } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport {\n  Container,\n  Divider,\n  Dropdown,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  List,\n  Menu,\n  Segment,\n  Visibility\n} from 'semantic-ui-react'\nimport './Gnb.scss'\n\nconst menuStyle = {\n  margin: '0 auto',\n  width: '700px',\n  border: 'none',\n  borderRadius: 0,\n  boxShadow: 'none',\n  marginBottom: '1em',\n  marginTop: '1em',\n  transition: 'box-shadow 0.5s ease, padding 0.5s ease'\n}\n\nconst fixedMenuStyle = {\n  left: '50%',\n  marginLeft: '-350px',\n  width: '700px',\n  backgroundColor: '#fff',\n  border: '1px solid #ddd',\n  boxShadow: '0px 3px 5px rgba(0, 0, 0, 0.2)'\n}\n\nclass Gnb extends Component {\n  state = {\n    menuFixed: false,\n    overlayFixed: false,\n    activeItem: 'bio'\n  }\n\n  render() {\n    const { menuFixed } = this.state\n\n    console.log(this.props.width)\n\n    return (\n      <div className=\"Gnb\">\n        <div className=\"mobile\">\n          <Visibility\n            onBottomPassed={this.stickTopMenu}\n            onBottomVisible={this.unStickTopMenu}\n            once={false}\n          >\n            <Menu\n              borderless\n              fixed={menuFixed ? 'top' : undefined}\n              style={menuFixed ? fixedMenuStyle : menuStyle}\n            >\n              <Container text>\n                <Menu.Item header as={NavLink} exact to=\"/\">\n                  Home\n                </Menu.Item>\n                <Menu.Item as={NavLink} to=\"/weather\">\n                  Weather\n                </Menu.Item>\n\n                <Menu.Menu position=\"right\">\n                  <Dropdown text=\"Dropdown\" pointing className=\"link item\">\n                    <Dropdown.Menu>\n                      <Dropdown.Item>List Item</Dropdown.Item>\n                      <Dropdown.Item>List Item</Dropdown.Item>\n                      <Dropdown.Divider />\n                      <Dropdown.Header>Header Item</Dropdown.Header>\n                      <Dropdown.Item>\n                        <i className=\"dropdown icon\" />\n                        <span className=\"text\">Submenu</span>\n                        <Dropdown.Menu>\n                          <Dropdown.Item>List Item</Dropdown.Item>\n                          <Dropdown.Item>List Item</Dropdown.Item>\n                        </Dropdown.Menu>\n                      </Dropdown.Item>\n                      <Dropdown.Item>List Item</Dropdown.Item>\n                    </Dropdown.Menu>\n                  </Dropdown>\n                </Menu.Menu>\n              </Container>\n            </Menu>\n          </Visibility>\n        </div>\n      </div>\n    )\n  }\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n  stickTopMenu = () => this.setState({ menuFixed: true })\n  unStickTopMenu = () => this.setState({ menuFixed: false })\n}\n\nexport default Gnb\n","import React from 'react'\nimport { Image } from 'semantic-ui-react'\nimport { bono } from 'imgs'\n\nconst Home = () => {\n  return (\n    <div>\n      홈입니다.\n      <Image src={bono} size='large' centered />\n      <Image src={bono} size='large' centered />\n      <Image src={bono} size='large' centered />\n    </div>\n  )\n}\n\nexport default Home\n","import React, { Component } from 'react'\n\nclass Weather extends Component {\n  render() {\n    return (\n      <div>\n        <h3>날씨</h3>\n      </div>\n    )\n  }\n}\n\nexport default Weather\n","import React from 'react'\nimport { BrowserRouter, Switch, Route, HashRouter } from 'react-router-dom'\n\nimport { Home, Weather } from 'pages'\n\nconst Routes = () => {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/home\" component={Home} />\n      <Route exact path=\"/weather\" component={Weather} />\n    </Switch>\n  )\n}\n\nexport default Routes\n","import React, { Component } from 'react'\n\nimport { BrowserRouter } from 'react-router-dom'\nimport { Grid, Segment } from 'semantic-ui-react'\n\nimport { Gnb } from 'containers'\n\nimport Routes from 'router'\n\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    width: ''\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions()\n    window.addEventListener('resize', this.updateWindowDimensions)\n  }\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions)\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <BrowserRouter basename=\"/git-page-test\">\n          <h1>React 연습 Page</h1>\n          <Gnb width={this.state.width} />\n          <Routes />\n        </BrowserRouter>\n      </div>\n    )\n  }\n\n  updateWindowDimensions = () => {\n    this.setState({\n      width: window.innerWidth\n    })\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}